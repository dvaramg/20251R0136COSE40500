# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DdRxvgDP76MXeoiWxsa5KaA9d1qFcuBd
"""

def is_safe(board, row, col):
    for i in range(col):
        if board[i] == row or \
           board[i] - i == row - col or \
           board[i] + i == row + col:
            return False
    return True

def solve_n_queens(n):
    def solve(board, col):
        if col == n:
            solutions.append(board[:])
            return
        for row in range(n):
            if is_safe(board, row, col):
                board.append(row)
                solve(board, col + 1)
                board.pop()

    solutions = []
    solve([], 0)

    if solutions:
        return solutions[0]
    else:
        return None


n = int(input())
solution = solve_n_queens(n)

if solution:
    for row in solution:
        print(row, end=" ")
else:
    print("No solution found.")